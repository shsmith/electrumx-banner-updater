#!/bin/bash

# update electrumx banner to report bitcoin memory pool, fees, height and time since last block
# activate with cron job similar to this
#*/2 * * * *  ~/bin/update-electrumx-banner

# specify your bitcoin-cli location
BITCOIN_CLI=/usr/bin/bitcoin-cli

# specify your bitcoin data directory
BITCOIN_DATADIR=~/.bitcoin

# specify the location of your electrumx banner file
# note: uses %{BANNER}.template as the template (top portion) of each banner update
BANNER=~/.electrumx/banner

# specify path to electrumx_rpc.py (.py removed as of 1.5)
ELECTRUMX_RPC=/usr/local/bin/electrumx_rpc

# specify electrumx RPC port
RPC_PORT=8000

# specify coinmarketcap.com API key
# One must sign up for at least a free 'basic' account at pro.coinmarketcap.com to use the API
CMC_PRO_API_KEY=

TFILE=/tmp/update-electrumx-banner-$$

# save initial banner as template for creation of new banners
if [ ! -f ${BANNER}.template ]; then
	cp ${BANNER} ${BANNER}.template
fi

# create new banner from template
cp ${BANNER}.template ${BANNER}.new

# electrum network status
${ELECTRUMX_RPC} getinfo > $TFILE
mySessions=`grep \"count\" $TFILE | grep -o '[0-9]*'`
goodPeers=`grep good $TFILE | grep -o '[0-9]*'`

echo There are currently ${goodPeers} public electrum servers. >> ${BANNER}.new
echo This server has ${mySessions} anonymous electrum connections. >> ${BANNER}.new
echo "" >> ${BANNER}.new

# timestamp
printf "As of %s " "$(date -u)" >> ${BANNER}.new

# mempool
MEMPOOL=`${BITCOIN_CLI} -datadir=${BITCOIN_DATADIR} getmempoolinfo | grep size | grep -o '[0-9\.]*'`
printf "there are %'d transactions in the memory pool\n" ${MEMPOOL} >> ${BANNER}.new

# report last block and current height from electrumx journal
journalctl --since "6 hours ago" -u electrumx -o short-iso --utc | grep Prefetcher:new | tail -n 1 > ${TFILE}
if [ `wc -c < ${TFILE}` -gt 10 ]; then
	block_height=`< ${TFILE} awk '{print $7}'`
	block_time=`< ${TFILE} awk '{print $1}'`
	block_utime=`date -ud $block_time +'%s'`
	now_utime=`date +'%s'`
	minutes_ago=`echo ${now_utime} ${block_utime} | awk '{print int(($1-$2)/6)/10}'`
	echo "Last block: ${minutes_ago} minutes ago; current height: ${block_height}" >> ${BANNER}.new
fi
rm ${TFILE}

# get exchange rate and average fee per satoshi
if ${BITCOIN_CLI} --version | grep -q ABC; then
	USDPERBTC=`curl -m 10 -L -s -H "X-CMC_PRO_API_KEY: ${CMC_PRO_API_KEY}" -H "Accept: application/json" -d "id=1831" -G https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest | jq -r '.data ."1831" .quote .USD .price`
	TICKER=BCHABC
	BYTESPERTX=226
elif ${BITCOIN_CLI} --version | grep -q SV; then
	USDPERBTC=`curl -m 10 -L -s -H "X-CMC_PRO_API_KEY: ${CMC_PRO_API_KEY}" -H "Accept: application/json" -d "id=3602" -G https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest | jq -r '.data ."3602" .quote .USD .price`
	TICKER=BCHSV
	BYTESPERTX=226
else
	USDPERBTC=`curl -m 10 -L -s -H "X-CMC_PRO_API_KEY: ${CMC_PRO_API_KEY}" -H "Accept: application/json" -d "id=1" -G https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest | jq -r '.data ."1" .quote .USD .price`
	TICKER=BTC
	BYTESPERTX=168
fi
USDPERSAT=`echo ${USDPERBTC} | awk '{print $1/100000000}'`

printf "Current exchange rate = %0.2f USD/%s; typical TX size = %d bytes\n" ${USDPERBTC} ${TICKER} ${BYTESPERTX} >> ${BANNER}.new

# report fees for various block times
PREVSATPERBYTE=none
for BLOCKS in 2 6 12 24 144 288 504 1008
do
	if [ ${TICKER} = BTC ]; then
		FEERATE=`${BITCOIN_CLI} -datadir=${BITCOIN_DATADIR} estimatesmartfee ${BLOCKS} | grep feerate | grep -o '[0-9\.\-]*'`
	else
		FEERATE=`${BITCOIN_CLI} -datadir=${BITCOIN_DATADIR} estimatefee ${BLOCKS}`
	fi

	SATPERBYTE=`echo ${FEERATE} | awk '{print $1*100000}'`
	if [ `echo ${SATPERBYTE} | awk '{print int($1*10)}'` -lt 0 ]; then
		break;
	fi

	if [ ${SATPERBYTE} != ${PREVSATPERBYTE} ]; then
		echo ${BLOCKS} ${SATPERBYTE} ${BYTESPERTX} ${USDPERSAT} | awk '{printf "Estimated miner fee for confirmation in %d blocks (%s hours) = %0.1f sat/B (%0.1f sat or $%0.3f)\n", $1, int($1/0.06)/100, $2, $2*$3, $2*$3*$4 }' >> ${BANNER}.new
		PREVSATPERBYTE=${SATPERBYTE}
	fi
done

# save backup of original banner on first run (just in case...)
if [ ! -f ${BANNER}.backup ]; then
	cp ${BANNER} ${BANNER}.backup
fi

# replace banner with newly generated version
mv ${BANNER}.new ${BANNER}
